title Caixa: UC3 - Charge card

participant ":User" as user
participant ":ChargeCardUI" as ccui
participant ":ChargeCardController" as controller
participant ":CafeteriaUserService" as srv

participant ":Money" as credit
participant ":Transaction" as tr

participant ":ChargeCreditsEvent" as event
participant ":PersistenceContext" as pcontext

participant ":TransactionRepository" as trp
participant ":RepositoryFactory" as fact
participant ":CafeteriaUserRepository" as userrep
participant ":ChargeCreditsEvent" as observer
participant ":CafeteriaUser" as cafUser


ccui->*controller : create()
controller -> srv: create()

srv->pcontext:repositories()
pcontext->fact:create()
pcontext->fact:cafeteriaUsers()
fact -> userrep : create()
controller -> observer : create()


observer->srv: create()
srv->pcontext:repositories()
pcontext->fact:create()
pcontext->fact:cafeteriaUsers()
controller->trp:create()

user->ccui: Inserts mechanographicNumber number
ccui -> controller : getCafeteriaUser(mechanographicNumber)
controller -> srv: user = findCafeteriaUserByMecNumber(mechanographicNumber)
srv->userrep:user = findByMecanographicNumber(mechanographicNumber)
userrep->cafUser: create()

userrep-->srv :
srv-->controller:
controller-->ccui:
ccui-->user:Shows the cafeteria data and current balance
user->ccui:Insert transaction value to charge card
ccui->controller:createMovementCharging(creditToCharge)
controller->credit:credit = create(valueToCharge, Currency.getInstance("EUR"))

controller->tr:t = transaction(user , transactionType , credit)

tr-->controller:

controller-->ccui: t != null

ccui->controller:saveMovementChargingTransaction()
controller->observer: observer.addObserver(this.controller)
pcontext->trp:transactionRepository()
controller->pcontext:t = transactionsave( t )

pcontext->trp:save(transaction)
trp-->pcontext:
pcontext-->controller: return t;
controller->tr: t.addObserver(observer)
tr->tr: addObserver(o)
controller->tr:t.alterState()
tr->tr:changeState()
controller->tr:t.notifyObservers(user)
tr->observer:notifyObservers(user)

observer -> observer: update((Transaction) obsevable , (CafeteriaUser)user)
observer -> observer:updateCafeteriaUserBalance()
observer->srv:save(user)
observer->cafUser:addCredits(obeservable.retrieveQuantityOfMoneyOfTheMovement() )
srv->pcontext: repositories()
pcontext->userrep:save(user)
observer->controller:notifyObservers(user)

controller->controller:update(update(Observable o, (CafeteriaUser) updatedUser)

controller->credit:updateBalance = updatedUser.getCurrentMoney()
controller->srv:user = service.findCafeteriaUserByMecNumber(mecNumber);
controller->credit:money = user.getCurrentMoney()
controller->credit: !updatedBalance.equals( money ) ? errorFlag = true : errorFlag = false 

ccui->controller:checkMovementPersistence()

ccui-->user:Confirms the success of the operation and shows new balance