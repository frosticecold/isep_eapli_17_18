title UC Deactivate User
User->DeactivateUserUI:show()
DeactivateUserUI->DeactivateUserController:create
DeactivateUserController->PersistenceContext:userRepository=PersistenceContext.repositories().users()
PersistenceContext->RepositoryFactory:users()
RepositoryFactory->UserRepository:create
DeactivateUserController->PersistenceContext:reasonRepository=PersistenceContext.repositories().deactivationReasonTypeRepository()
PersistenceContext->RepositoryFactory:deactivationReasonTypeRepository()
RepositoryFactory->DeactivationReasonRepository:create

DeactivateUserUI->DeactivateUserController:list_users=activeUsers()
DeactivateUserController->AuthorizationService:ensurePermissionOfLoggedInUser(admin)
DeactivateUserController->UserRepository:findAllActiveUsers()
DeactivateUserUI->DeactivateUserUI:Show users
DeactivateUserUI-->User:Ask for what user to deactivate
User->DeactivateUserUI:selects user
DeactivateUserUI->DeactivateUserController:getAllReasonsTypes()
DeactivateUserController->AuthorizationService:ensurePermissionOfLoggedInUser(admin)
DeactivateUserController->DeactivationReasonRepository:findAll()

DeactivateUserUI->DeactivateUserUI:show Reasons
DeactivateUserUI-->User:Ask for what reason
User->DeactivateUserUI:Select reason
DeactivateUserUI-->User:Ask for a comment
User->DeactivateUserUI:insert comment

DeactivateUserUI->DeactivateUserController:deactivateUser(user,reason,comment)
DeactivateUserController->AuthorizationService:ensurePermissionOfLoggedInUser(Admin)
DeactivateUserController->SystemUser:deactivate(now,reason,comment)
DeactivateUserController->UserRepository:save(user)
DeactivateUserController-->DeactivateUserUI:user
DeactivateUserUI-->User:run again?
User->DeactivateUserUI:Answer
